# app/pipelines/pdf.py
from pathlib import Path
from typing import List, Dict, Optional
from uuid import uuid4

from fpdf import FPDF
from PIL import Image, UnidentifiedImageError

# ---------- text helpers ----------

REPLACEMENTS = {
    "’": "'", "‘": "'", "“": '"', "”": '"',
    "–": "-", "—": "-", "•": "-", "…": "...",
    "\u00a0": " ",  # non-breaking space -> space
}

def _clean_text(s: str) -> str:
    if not s:
        return ""
    for k, v in REPLACEMENTS.items():
        s = s.replace(k, v)
    return s

def _soft_break_long_tokens(text: str, max_token_len: int = 35) -> str:
    out = []
    for tok in text.split(" "):
        if len(tok) > max_token_len:
            chunks = [tok[i:i+max_token_len] for i in range(0, len(tok), max_token_len)]
            out.append(" ".join(chunks))
        else:
            out.append(tok)
    return " ".join(out)

# ---------- font handling ----------

def _setup_font(pdf: FPDF) -> str:
    fonts_dir = Path("data/fonts")
    regular = fonts_dir / "DejaVuSans.ttf"
    bold = fonts_dir / "DejaVuSans-Bold.ttf"

    if regular.exists():
        try:
            pdf.add_font("DejaVu", "", regular.as_posix(), uni=True)
            if bold.exists():
                pdf.add_font("DejaVu", "B", bold.as_posix(), uni=True)
            return "DejaVu"
        except Exception as e:
            print(f"[pdf] Could not load DejaVu fonts, falling back to helvetica: {e}")

    return "helvetica"

# ---------- image handling ----------

def _safe_image_fit(pdf: FPDF, img_path: str, y: float = 20, max_h: float = 170):
    """
    Open image safely, convert to RGB if needed, and draw scaled to fit width.
    Uses a UNIQUE temp filename to avoid FPDF image caching (fixes 'same image' bug).
    """
    try:
        img = Image.open(img_path)
    except (FileNotFoundError, UnidentifiedImageError) as e:
        print(f"[pdf] Skipping image {img_path}: {e}")
        return

    if img.mode not in ("RGB", "RGBA"):
        img = img.convert("RGB")

    w, h = img.size
    max_w = pdf.epw
    scale = min(max_w / w, max_h / h)
    draw_w, draw_h = w * scale, h * scale
    x = (pdf.w - draw_w) / 2

    tmp = Path(f"data/tmp_pdf_image_{uuid4().hex}.png")
    tmp.parent.mkdir(parents=True, exist_ok=True)
    img.save(tmp)

    try:
        pdf.image(tmp.as_posix(), x=x, y=y, w=draw_w, h=draw_h)
    finally:
        try:
            tmp.unlink(missing_ok=True)
        except Exception:
            pass

# ---------- main builders ----------

def build_pdf(title: str, story: str, images: List[Optional[str]], out_path: str) -> str:
    out = Path(out_path)
    out.parent.mkdir(parents=True, exist_ok=True)

    pdf = FPDF(format="A4")
    pdf.set_auto_page_break(auto=True, margin=18)
    pdf.set_margins(18, 18, 18)
    pdf.add_page()

    font = _setup_font(pdf)

    # Title
    pdf.set_font(font, "B", 22)
    title_txt = _clean_text(title)
    if font == "helvetica":
        title_txt = _soft_break_long_tokens(title_txt)
    pdf.multi_cell(w=pdf.epw, h=10, txt=title_txt, align="C")
    pdf.ln(4)

    # Story
    pdf.set_font(font, "", 13)
    safe_story = _clean_text(story)
    if font == "helvetica":
        safe_story = _soft_break_long_tokens(safe_story)
        safe_story = safe_story.encode("latin-1", "ignore").decode("latin-1")

    paragraphs = [p.strip() for p in (safe_story or "").split("\n\n") if p.strip()]
    for para in paragraphs:
        pdf.multi_cell(w=pdf.epw, h=7, txt=para, align="J")
        pdf.ln(2)

    # Images (each on its own page)
    for p in images or []:
        if not p:
            continue
        pdf.add_page()
        _safe_image_fit(pdf, p, y=20, max_h=230)

    pdf.output(out.as_posix())
    return out.as_posix()

def build_pdf_from_scenes(title: str, scenes: List[Dict], out_path: str) -> str:
    out = Path(out_path)
    out.parent.mkdir(parents=True, exist_ok=True)

    pdf = FPDF(format="A4")
    pdf.set_auto_page_break(auto=True, margin=18)
    pdf.set_margins(18, 18, 18)

    font = _setup_font(pdf)

    # Cover
    pdf.add_page()
    pdf.set_font(font, "B", 24)
    title_txt = _clean_text(title)
    if font == "helvetica":
        title_txt = _soft_break_long_tokens(title_txt).encode("latin-1", "ignore").decode("latin-1")
    pdf.multi_cell(pdf.epw, 12, title_txt, align="C")
    pdf.ln(4)
    pdf.set_font(font, "", 12)
    sub = "A picture book generated by your project."
    if font == "helvetica":
        sub = sub.encode("latin-1", "ignore").decode("latin-1")
    pdf.multi_cell(pdf.epw, 7, sub, align="C")

    # Pages
    for sc in scenes or []:
        cap = _clean_text(sc.get("caption", ""))
        if font == "helvetica":
            cap = _soft_break_long_tokens(cap).encode("latin-1", "ignore").decode("latin-1")

        pdf.add_page()
        ipath = sc.get("image_path")
        if ipath and Path(ipath).exists():
            _safe_image_fit(pdf, ipath, y=20, max_h=170)
            pdf.set_y(20 + 175)

        pdf.set_font(font, "", 14)
        pdf.multi_cell(pdf.epw, 8, cap, align="J")

    pdf.output(out.as_posix())
    return out.as_posix()
